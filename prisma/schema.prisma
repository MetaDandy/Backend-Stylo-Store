// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(20)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  assignedRole AssignedRole[]

  @@index([name])
}

model User{
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  email String @unique @db.VarChar(75)
  phone String @db.VarChar(15)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  assignedRole AssignedRole[]
  order Order[]
  delivery Delivery[]

  @@index([email])
}

model AssignedRole{
  id Int @id @default(autoincrement())
  password String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  role Role @relation(fields: [roleId],references: [id])
  roleId Int
  user User @relation(fields: [userId],references: [id])
  userId Int
}

model Branch{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(50)
  direction String @db.VarChar(80)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  inventory Inventory[]
}

model Season{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(35)
  description String @db.VarChar(75)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  product Product[]
  catalog Catalog[]
}

model Category{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(35)
  description String @db.VarChar(75)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  typeCategory TypeCategory @relation(fields: [typeCategoryId],references: [id])
  typeCategoryId Int
  product Product[]
}

model TypeCategory{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(35)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  category Category[]
}

model Size{
  id String @id  @db.VarChar(5)
  name String @unique @db.VarChar(20)
  description String @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  productSize ProductSize[]
}

model Brand{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(35)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  product Product[]
}

model Product{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(70)
  price Float 
  description String @db.VarChar(75)
  bestSeller Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  season Season @relation(fields: [seasonId],references: [id])
  seasonId Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  brand Brand @relation(fields: [brandId], references: [id])
  brandId Int
  inventory Inventory[]
  order Order[]
  photo Photo[]
  productSize ProductSize[]
  productCatalog ProductCatalog[]
}

model Catalog{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(70)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  season Season @relation(fields: [seasonId],references: [id])
  seasonId Int
  productCatalog ProductCatalog[]
}

model ProductCatalog{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  product Product @relation(fields: [productId],references: [id])
  productId Int
  catalog Catalog @relation(fields: [catalogId],references: [id])
  catalogId Int
}

model ProductSize{
  id Int @id @default(autoincrement()) 
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  product Product @relation(fields: [productId],references: [id])
  productId Int
  size Size @relation(fields: [sizeId],references: [id])
  sizeId String
}

model Photo{
  id Int @id @default(autoincrement())
  path String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  product Product @relation(fields: [productId],references: [id])
  productId Int
}

model Inventory{
  id Int @id @default(autoincrement())
  stock Int 
  branch Branch @relation(fields: [branchId],references: [id])
  branchId Int
  product Product @relation(fields: [productId],references: [id])
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
}

model OrderType{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(25)
  description String @db.VarChar(75)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  orderStatus OrderStatus[]
}

model Order{
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(25)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orderStatus OrderStatus[]
  delivery Delivery[]
  product Product @relation(fields: [productId],references: [id])
  productId Int
  bill Bill @relation(fields: [billId],references: [id])
  billId Int
  user User @relation(fields: [userId],references: [id])
  userId Int
}

model OrderStatus{
  id Int @id @default(autoincrement())
  description String @db.VarChar(75)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  orderType OrderType @relation(fields: [orderTypeId],references: [id])
  orderTypeId Int
  order Order @relation(fields: [orderId],references: [id])
  orderId Int
}

model Delivery{
  id Int @id @default(autoincrement())
  direction String @db.VarChar(75)
  cost Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  user User @relation(fields: [userId],references: [id])
  userId Int
  order Order @relation(fields: [orderId],references: [id])
  orderId Int
}

model Currency{
  id Int @id @default(autoincrement())
  name String @db.VarChar(20)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  bill Bill[]
}

model Payment{
  id Int @id @default(autoincrement())
  name String @db.VarChar(25)
  description String @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  bill Bill[]
}

model Bill{
  id Int @id @default(autoincrement())
  totalAmount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  order Order[]
  currency Currency @relation(fields: [currencyId],references: [id])
  currencyId Int
  payment Payment @relation(fields: [paymentId],references: [id])
  paymentId Int
}